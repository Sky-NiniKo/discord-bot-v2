import random
from datetime import date, timedelta, datetime

import discord
from discord.ext.commands import Bot

from python_script.sheet import EventsDate


def easter_date(year=date.today().year):
    # Calcule le jour de la fÃªte de pÃ¢ques
    a = year % 19
    b = year // 100
    c = year % 100
    d = (19 * a + b - b // 4 - ((b - (b + 8) // 25 + 1) // 3) + 15) % 30
    e = (32 + 2 * (b % 4) + 2 * (c // 4) - d - (c % 4)) % 7
    f = d + e - 7 * ((a + 11 * d + 22 * e) // 451) + 114
    month = f // 31
    day = f % 31 + 1
    return date(year, month, day)


class Activity:
    def __init__(self, bot: Bot, sheet_id: str):
        self.bot = bot
        self.sheet = EventsDate(sheet_id)
        self.events = {}
        self.activities = [("joue", "tourner en rond"), ("joue", "faire ses devoirs"), ("regarde", "des animÃ©es"),
                           ("joue", "pile ou face"), ("joue", "dire n'importe quoi"), ("joue", "faire une omelette"),
                           ("Ã©coute", "de la musique"), ("joue", "lancer des dÃ©s"), ("joue", "faire des top 1"),
                           ("joue", "se questionner sur son existance"), ("regarde", "YouTube"),
                           ("joue", "Ã©nerver des gens"),
                           ("joue", "faire des choses pas trÃ¨s catholique (mais il est athÃ©e)"),
                           ("joue", "faire des gÃ¢teaux"), ("joue", "envoyer des message"),
                           ("joue", "la machine Ã  cafÃ©"), ("joue", "au frigo"),
                           ("joue", "jjjoue Ã  jjjouÃ¹e Ã  jjjoÃ¹Ã©e Ã  jjjouÃ¹Ã©e Ã a"), ("joue", "cube cube"),
                           ("regarde", "les Ã©toiles"), ("regarde", "le ciel"), ("Ã©coute", "[inserer musique]"),
                           ("joue", "avec un sombrero"), ("regarde", "les fautes de franÃ§ais des gens pas douÃ©s")]

    async def __init_events__(self):
        self.events = await self.sheet.get()

    def add(self, event_date, event_type, activity_name):
        self.events[event_date] = [event_type, activity_name]
        self.sheet.add(event_date, event_type, activity_name)

    async def change_to(self, event_type=None, activity_name=None, **kwargs):
        if activity_name is None:
            raise ValueError("No activity name")
        if event_type == "regarde":
            await self.bot.change_presence(activity=discord.Activity(type=3, name=activity_name, **kwargs))
        elif event_type == "Ã©coute":
            await self.bot.change_presence(activity=discord.Activity(type=2, name=activity_name, **kwargs))
        elif event_type == "joue":
            await self.bot.change_presence(activity=discord.Game(name=activity_name))
        else:
            await self.bot.change_presence(activity=discord.CustomActivity(name=activity_name, **kwargs))

    async def change(self):
        day = date.today()
        year = day.year

        # Ã©vÃ©nement dÃ©jÃ  passer
        if len(self.events) >= 1 and str(day - timedelta(days=1)) in self.events:
            self.sheet.remove([str(day - timedelta(days=1)), self.events[str(day - timedelta(days=1))]])
            del self.events[str(day - timedelta(days=1))]

        if len(self.events) >= 1 and str(day) in self.events:  # Ã©vÃ©nement rajouter manuellement
            event_type, activity_name = self.events[str(day)]
            await self.change_to(event_type=event_type, activity_name=activity_name)
        elif day == date(year, 12, 24):  # noÃ«l
            await self.change_to(activity_name="est triste car il n'a pas eu de cadeaux", emoji="ğŸ˜­")
        elif day == date(year, 7, 14):  # 14 juillet
            await self.change_to("regarde", "tous les anciens dÃ©filÃ©s")
        elif day == easter_date():  # pÃ¢que
            await self.change_to("joue", "rÃ©colter des Å“ufs en chocolat")
        else:
            random.seed(str(day))  # faire en sorte que l'alÃ©atoire dÃ©pende du jour
            event_type, activity_name = random.choice(self.activities)  # activitÃ© alÃ©atoire
            await self.change_to(event_type, activity_name)

    def get_event_list(self):
        dates = list(self.events.keys())
        dates.sort(key=lambda event_date: datetime.strptime(date, "%Y-%m-%d"))
        return [[one_date] + self.events[one_date] for one_date in dates]
